(self as text, optional ClientCredentialTokenRecord as record) =>
    let
        GetContinuation = (response) as nullable text =>
            Record.FieldOrDefault(Record.FieldOrDefault(response, "extensions"), "continuation"),
        GraphQLQuery = (query as text, continuation as nullable text) as table =>
            let
                Uri = Text.Replace(self, "/api/v1/", "/api/v1-preview/") & "/graphql",
                UriWithContinuation = if continuation = null then Uri else Uri & "?continuation=" & continuation,
                formattedQuery = "{""query"": """
                    & Text.Replace(Text.Replace(query, "#(lf)", "\r\n"), """", "\""")
                    & """, ""variables"":{}}",
                response =
                    if (Extension.CurrentCredential()[AuthenticationKind] = "OAuth") then
                        Web.Contents(
                            UriWithContinuation,
                            [
                                Headers = [
                                    #"Method" = "POST",
                                    #"Content-Type" = "application/json"
                                ],
                                Content = Text.ToBinary(formattedQuery),
                                IsRetry = true
                            ]
                        )
                    else
                        Web.Contents(
                            UriWithContinuation,
                            [
                                Headers = [
                                    #"Authorization" = "Bearer "
                                        & ClientCredentialTokenRecord[accessToken][access_token],
                                    #"Method" = "POST",
                                    #"Content-Type" = "application/json"
                                ],
                                Content = Text.ToBinary(formattedQuery),
                                IsRetry = true
                            ]
                        ),
                getJsonQuery = Json.Document(response),
                newContinuation = GetContinuation(getJsonQuery),
                data = Record.FieldOrDefault(getJsonQuery, "data"),
                tableOfData = Record.ToTable(data),
                expandedTableOfData = Table.ExpandRecordColumn(
                    tableOfData, "Value", {"assets", "referenceData", "events"}, {
                        "assets",
                        "referenceData",
                        "events"
                    }
                )
            in
                tableOfData meta [Continuation = newContinuation],
        // Read all pages of data.
        // After every page, we check the "NextLink" record on the metadata of the previous request.
        // Table.GenerateByPage will keep asking for more pages until we return null.
        GetAllPagesByNextLink = (query as text) as table =>
            Table.GenerateByPage(
                (previous) =>
                    let
                        // if previous is null, then this is our first page of data
                        continuation = if (previous = null) then "" else Value.Metadata(previous)[Continuation]?,
                        // if continuation was set to null by the previous call, we know we have no more data
                        page = if (continuation <> null) then GraphQLQuery(query, continuation) else null
                    in
                        page
            ),
        // The getNextPage function takes a single argument and is expected to return a nullable table
        Table.GenerateByPage = (getNextPage as function) as table =>
            let
                listOfPages = List.Generate(
                    () => getNextPage(null),
                    // get the first page of data
                    (lastPage) => lastPage <> null,
                    // stop when the function returns null
                    (lastPage) => getNextPage(lastPage)
                    // pass the previous page to the next function call
                ),
                // concatenate the pages together
                tableOfPages = Table.FromList(listOfPages, Splitter.SplitByNothing(), {"Column1"}),
                firstRow = tableOfPages{0} ?
            in
                // if we didn't get back any pages of data, return an empty table
                // otherwise set the table type based on the columns of the first page
                if (firstRow = null) then
                    Table.FromRows({})
                    // check for empty first table
                else if (Table.IsEmpty(firstRow[Column1])) then
                    firstRow[Column1]
                else
                    Value.ReplaceType(
                        Table.ExpandTableColumn(tableOfPages, "Column1", Table.ColumnNames(firstRow[Column1])),
                        Value.Type(firstRow[Column1])
                    ),
        // Query
        GraphQLQueryType = type function (
            query as (
                type text meta [
                    Documentation.FieldCaption = "Graph QL Query",
                    Documentation.FieldDescription = "Graph QL Query.",
                    Documentation.SampleValues = {"{}"},
                    Formatting.IsMultiLine = true,
                    Formatting.IsCode = false
                ]
            )
        ) as binary meta [
            Documentation.LongDescription = "Submit a GraphQL query to AVEVA Data Hub",
            Documentation.Name = "AVEVA Data Hub GraphQL"
        ],
        // Format GraphQL Request
        GraphQLRequest = Value.ReplaceType(GetAllPagesByNextLink, GraphQLQueryType)
    in
        GraphQLRequest
